

<미션>
==> 사용자인증JSP : Model1사용, DAO만 Model2개발방식!!

userinput.jsp (사용자정보 입력폼, 회원가입폼)

userprocess.jsp (사용자정보  DB저장)
  - insert

userconfirm.jsp (로그인 화면폼)

confirmprocess.jsp (로그인 처리: 아이디, 비번에 대한 존재와 일치를 체크)
  - select

modifyuser.jsp (사용자정보 수정폼)
  - select

modifyprocess.jsp (사용자정보 DB수정처리)
  - update

deleteid.jsp (사용자정보 DB삭제, 회원탈퇴)
  - delete

confirmid.jsp (아이디 중복여부 처리)
  - select

service.jsp   <------- sessionT3.jsp내용 복사

========================================================================
테이블명: UserInfo
<SQL스크립트 DDL>

drop table userinfo;

create table userinfo(
  id      varchar2(20) constraint userinfo_pk primary key,
  pass    varchar2(20) not null,
  name    varchar2(30) not null,
  jumin   varchar2(14) not null, --'960302-1012345'
  birth   varchar2(10), --'1996-03-02'
  zip     number(5)    not null,
  addr    varchar2(300),
  email   varchar2(50)  not null,
  job     varchar2(30)  not null
);
---> userinfo.sql 저장, 실행
---> UserInfo.java (9개의 속성 정의)

-----------------------------------------------------------------------------
작업순서)
   회원정보입력  ---> 로그인처리  ---> 수정처리
   ---> 삭제처리  ---> 아이디 중복처리   ---> 유효성검사
   
1. userinput.jsp(입력폼,회원가입폼)에서 '월'과 '일'에 대한 숫자 출력.
     월: 01~09~12 (자바for문을 통해 출력)
     
2. UserInfo.java작성 (테이블의 한 레코드 표현)

3. UserInfoDAO.java작성      

4. DB insert작업(userprocess.jsp)
    DAO의 insert호출  ---> 호출결과에 따라 적당한 메시지 출력
    
5. userconfirm.jsp (로그인화면)  ---이동--> confirmprocess.jsp
     - UserInfoDAO의 selectLogin() 메소드 구현
     - 로그인처리
     - 호출결과에 따라 적당한 메시지 출력
     - 로그인 성공시 세션적용(설정)
         
6. 수정폼에 기존 데이터 뿌리기(modifyuser.jsp)
     - UserInfoDAO클래스내에 select()메소드 구현
     - 호출 후 결과값을 HTML에 뿌려주기
     
     
7. 수정폼에 입력된 데이터를 실제 DB에 반영(modifyprocess.jsp)
     - UserInfoDAO클래스내에 modify()메소드 구현
     - 수정항목: 비번,우편번호,주소,이메일,직업
     - 호출 결과에 따라 적당한 메시지(table) 출력
     
8. 삭제(회원탈퇴)버튼 클릭시 - deleteid.jsp
     - 정말 삭제할지를 확인 (JavaScript confirm창)
     - DB에서 삭제처리
     - 호출 결과에 따라 적당한 메시지(table) 출력
     
9. 입력폼에 있는 '아이디 중복확인'에 대한 처리
   ---> confirmid.jsp  (window.open처리)

10. 입력폼과 수정폼의 데이터 입력에 대한 유효성검사.
    (빈값, 주민번호에 대한 숫자체크와 자릿수,
        이메일에 대한 유효성검사- gildong1004@naver.com)
     - [영문자와 숫자조합6~20]@[영문자].[영문자]
     ----> javascript처리 ----> validateCheck()함수 추가









   
        
     
              




   











